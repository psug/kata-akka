akka {
  event-handlers = ["akka.event.EventHandler$DefaultListener"] # event handlers to register at boot time (EventHandler$DefaultListener logs to STDOUT)
  event-handler-level = "INFO"

  time-unit = "seconds"    # Time unit for all timeout properties throughout the config

  actor {
    timeout = 5                        # Default timeout for Future based invocations
                                       #    - Actor:        !! && !!!
                                       #    - UntypedActor: sendRequestReply && sendRequestReplyFuture
                                       #    - TypedActor:   methods with non-void return type
    serialize-messages = off           # Does a deep clone of (non-primitive) messages to ensure immutability
    throughput = 5                     # Default throughput for all ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness
    throughput-deadline-time = -1      # Default throughput deadline for all ExecutorBasedEventDrivenDispatcher, set to 0 or negative for no deadline
    dispatcher-shutdown-timeout = 1    # Using the akka.time-unit, how long dispatchers by default will wait for new actors until they shut down

    default-dispatcher {
      type = "GlobalExecutorBasedEventDriven" # Must be one of the following, all "Global*" are non-configurable
                                              #   - ExecutorBasedEventDriven
                                              #   - ExecutorBasedEventDrivenWorkStealing
                                              #   - GlobalExecutorBasedEventDriven
      keep-alive-time = 60             # Keep alive time for threads
      core-pool-size-factor = 1.0      # No of core threads ... ceil(available processors * factor)
      max-pool-size-factor  = 4.0      # Max no of threads ... ceil(available processors * factor)
      executor-bounds = -1             # Makes the Executor bounded, -1 is unbounded
      allow-core-timeout = on          # Allow core threads to time out
      rejection-policy = "caller-runs" # abort, caller-runs, discard-oldest, discard
      throughput = 5                   # Throughput for ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness
      throughput-deadline-time = -1    # Throughput deadline for ExecutorBasedEventDrivenDispatcher, set to 0 or negative for no deadline
      mailbox-capacity = -1            # If negative (or zero) then an unbounded mailbox is used (default)
                                       # If positive then a bounded mailbox is used and the capacity is set using the property
                                       # NOTE: setting a mailbox to 'blocking' can be a bit dangerous,
                                       #       could lead to deadlock, use with care
                                       #
                                       # The following are only used for ExecutorBasedEventDriven
                                       # and only if mailbox-capacity > 0
      mailbox-push-timeout-time = 10   # Specifies the timeout to add a new message to a mailbox that is full - negative number means infinite timeout
                                       #       (in unit defined by the time-unit property)
    }
  }


  remote {
    server {
      service = on

      hostname = "localhost"
      port = 2552

      connection-timeout = 1
      untrusted-mode = on
    }

    client {
      reconnect-delay = 5
      read-timeout = 10
      reconnection-time-window = 600 # the maximum time window that a client should try to reconnect for

      buffering {
        retry-message-send-on-failure = on
        capacity = -1                      # If negative (or zero) then an unbounded mailbox is used (default)
                                           # If positive then a bounded mailbox is used and the capacity is set using the property
      }
    }

  }
}
